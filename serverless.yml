service: toc-middleware-configValues
frameworkVersion: "3"
useDotenv: true
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-2
  stage: ${opt:stage, 'dev'}
  environment:
    CONFIG_VALUES_TABLE: ${self:custom.configValuesTablename}
    EI_CLOUD_ACC_NAME: ${env:EI_CLOUD_ACC_NAME}
    EI_CLOUD_ACC_ID: ${env:EI_CLOUD_ACC_ID}
    USER_POOL_ID:
      Ref: UserPool
    USER_POOL_CLIENT_ID:
      Ref: UserPoolClient
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.configValuesTablename}"
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:AdminListGroupsForUser
          Resource: !GetAtt UserPool.Arn

resources:
  Resources:
    configValuesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.configValuesTablename}
        AttributeDefinitions:
          - AttributeName: value
            AttributeType: S
        KeySchema:
          - AttributeName: value
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        Schema:
          - AttributeDataType: String
            Name: email
            Required: true
          - AttributeDataType: String
            Name: name
            Required: true

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-user-pool-client-${sls:stage}
        GenerateSecret: false
        UserPoolId:
          Ref: UserPool
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    CognitoAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt UserPool.Arn

functions:
  hello:
    handler: functions/handler.hello
    events:
      - http:
          path: /hello
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer 

  setConfig:
    handler: functions/updateConfigTable.handler
    events:
      - http:
          method: post
          path: /seed-config-values
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer 

  getConfig:
    handler: functions/getConfig.handler
    events:
      - http:
          method: get
          path: /config-values
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer 
 
  updateConfig:
    handler: functions/updateTable.handler
    events:
      - http:
          method: put
          path: /config-values
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: CognitoAuthorizer 

  changePassword:
    handler: functions/changePassword.handler
    events:
      - http:
          path: /changePassword
          method: post
          cors: true 

  login:
    handler: functions/login.handler
    events:
      - http:
          path: /login
          method: post
          cors: true 


custom:
  configValuesTablename: ${self:service}-table
