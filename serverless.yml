service: demo-toc
frameworkVersion: "3"
useDotenv: true
provider:
  name: aws
  runtime: nodejs14.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  environment:
    CURRENT_STAGE: ${sls:stage}
    CONFIG_VALUES_TABLE: ${self:custom.configValuesTablename}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.configValuesTablename}"

functions:
  hello:
    handler: handler.hello
    events:
      - httpApi:
          path: /hello
          method: get
          cors: true
  getConfig:
    handler: getConfig.handler
    events:
      - httpApi:
          path: /config-values
          method: post
          cors: true
  setConfig:
    handler: updateConfigTable.handler
    events:
      - httpApi:
          path: /config-values
          method: post
          cors: true
  updateConfig:
    handler: updateTable.handler
    events:
      - http:
          path: config
          method: put
          cors: true
resources:
  Resources:
    configValuesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.configValuesTablename}
        AttributeDefinitions:
          - AttributeName: value
            AttributeType: S
        KeySchema:
          - AttributeName: value
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

custom:
  configValuesTablename: configValues-${self:provider.stage}
